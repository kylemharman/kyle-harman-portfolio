{"version":3,"sources":["styles/NavigationBurgerButtonStyled.js","components/NavigationBurgerButton.js","styles/NavigationOverlayStyled.js","components/NavigationOverlay.js","styles/NavBarStyled.js","components/NavBar.js","containers/App.js","pages/Home.js","pages/About.js","pages/Projects.js","pages/Contact.js","serviceWorker.js","index.js","containers/Routes.js"],"names":["BurgerButton","styled","button","props","active","NavigationBurgerButton","onClick","clicked","NavigationOverlayNav","nav","StyledNavLink","Link","background","NavigationOverlay","to","Nav","NavBar","Fragment","App","useState","openMenu","setOpenMenu","Home","About","Projects","Contact","Boolean","window","location","hostname","match","ReactDOM","render","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"67BAEO,IAAMA,EAAeC,IAAOC,OAAV,KAoBR,SAAAC,GAAK,OAAKA,EAAMC,OAAS,kCAAoC,QAK/D,SAAAD,GAAK,OAAKA,EAAMC,OAAS,IAAM,OAGjC,SAAAD,GAAK,OAAKA,EAAMC,OAAS,OAAS,UAC9B,SAAAD,GAAK,OAAKA,EAAMC,OAAS,kCAAoC,QAKnD,SAAAD,GAAK,OAAKA,EAAMC,OAAS,OAAS,UChC9C,SAASC,EAAuBF,GAE3C,OACI,kBAACH,EAAD,CAAcM,QAASH,EAAMI,QAASH,OAAQD,EAAMC,QACjD,8BACA,8BACA,+B,84BCPJ,IAAMI,EAAuBP,IAAOQ,IAAV,KAYlB,SAAAN,GAAK,OAAKA,EAAMC,OAAS,iBAAmB,uBAG9CM,EAAgBT,YAAOU,IAAPV,CAAH,KAWC,SAAAE,GAAK,OAAIA,EAAMS,cCb3BC,EAZW,SAACV,GAEvB,OACI,kBAACK,EAAD,CAAsBJ,OAAQD,EAAMC,OAAQE,QAASH,EAAMI,SACvD,kBAACG,EAAD,CAAeI,GAAG,IAAIF,WAAW,sIAAjC,SACA,kBAACF,EAAD,CAAeI,GAAG,SAASF,WAAW,uIAAtC,UACA,kBAACF,EAAD,CAAeI,GAAG,YAAYF,WAAW,0IAAzC,aACA,kBAACF,EAAD,CAAeI,GAAG,WAAWF,WAAW,yIAAxC,c,sLCTL,IAAMG,EAAMd,IAAOQ,IAAV,KCKD,SAASO,EAAOb,GAE3B,OACI,gCACI,kBAACY,EAAD,KACI,kBAAC,IAAME,SAAP,KACI,wCAGJ,kBAAC,EAAD,CAAmBb,OAAQD,EAAMC,OAAQG,QAASJ,EAAMI,UACxD,kBAACF,EAAD,CAAwBE,QAASJ,EAAMI,QAASH,OAAQD,EAAMC,WCd9E,IAeec,EAfH,WAAO,IAAD,EAEkBC,oBAAS,GAF3B,mBAEPC,EAFO,KAEGC,EAFH,KAQd,OACI,6BACI,kBAACL,EAAD,CAAQT,QANU,WACtBc,GAAaD,IAK2BhB,OAAQgB,MCXzC,SAASE,IACpB,OACI,6BACG,wCCHI,SAASC,IACpB,OACI,6BACI,sCCHG,SAASC,IACpB,OACI,6BACI,yCCHG,SAASC,IACpB,OACI,6BACI,wCCOQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCED,WACd,OACC,6BACC,kBAAC,EAAD,MACA,kBAAC,IAAD,KACC,kBAACV,EAAD,CAAMW,KAAK,MACX,kBAACV,EAAD,CAAOU,KAAK,WACZ,kBAACT,EAAD,CAAUS,KAAK,cACf,kBAACR,EAAD,CAASQ,KAAK,iBDVF,MAAYC,SAASC,eAAe,SD6H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.44cf96e3.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const BurgerButton = styled.button`\n\n  display: flex;\n  align-items: flex-end;\n  flex-direction: column;\n  justify-content: space-around;\n  width: 2rem;\n  height: 2rem;\n  background: transparent;\n  border: none;\n  cursor: pointer;\n  padding: 0;\n  z-index: 10;\n  \n  &:focus {\n    outline: none;\n  }\n\n  div:first-child {\n    width: 2rem;\n    transform: ${props => (props.active ? \"translateY(10px) rotate(-45deg)\" : null)}; \n    \n  }\n  div:nth-child(2) {\n    width: 1.5rem;\n    opacity: ${props => (props.active ? \"0\" : \"1\")};\n  }\n  div:last-child {\n    width: ${props => (props.active ? \"2rem\" : \"1rem\")};\n    transform: ${props => (props.active ? \"translateY(-10px) rotate(45deg)\" : null)}; \n  }\n  \n  div {\n    height: 2px;\n    /* background-color: ${props => (props.active ? \"#fff\" : \"#000\")}; */\n    background-color: #000;\n    transition: all 0.3s linear;\n  }\n`","import React from 'react'\nimport {BurgerButton} from '../styles/NavigationBurgerButtonStyled'\n\n\nexport default function NavigationBurgerButton(props) {\n\n    return (\n        <BurgerButton onClick={props.clicked} active={props.active}>\n           <div></div>\n           <div></div>\n           <div></div>\n        </BurgerButton>\n    )\n}\n","import styled from 'styled-components';\nimport {Link} from '@reach/router'\n\nexport const NavigationOverlayNav = styled.nav`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: whitesmoke;\n  height: 100vh;\n  width: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  transition: all 0.3s ease-out;\n  transform: ${props => (props.active ? \"translateY(0%)\" : \"translateY(-100%)\")};\n`\n\nexport const StyledNavLink = styled(Link) `\n    text-decoration: none;\n    font-weight: 700;\n    font-size: 5rem;\n    margin: 0.5rem;\n    -webkit-text-stroke-width: 1px;\n    -webkit-text-stroke-color: black;\n    color: whitesmoke;\n    transition: all 0.3s ease-in-out;\n    \n    &:hover {\n        background: url(${ props => props.background});\n        background-size: cover;\n        background-position: center;\n        background-clip: text;\n        -webkit-background-clip: text;\n        -webkit-text-stroke-width: 0px;\n        color: transparent;\n    }\n` \n\n","import React from 'react';\n// styles\nimport {NavigationOverlayNav , StyledNavLink} from '../styles/NavigationOverlayStyled';\n\nconst NavigationOverlay = (props) => {\n\n    return (\n        <NavigationOverlayNav active={props.active} onClick={props.clicked}>\n            <StyledNavLink to=\"/\" background=\"https://images.unsplash.com/photo-1507561152-ed3719ac59f1?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=882&q=80\">Home.</StyledNavLink>\n            <StyledNavLink to=\"/about\" background=\"https://images.unsplash.com/photo-1554188248-986adbb73be4?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2100&q=80\">About.</StyledNavLink>\n            <StyledNavLink to=\"/projects\" background=\"https://images.unsplash.com/photo-1565855991995-7a5ceb19ee95?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2100&q=80\">Projects.</StyledNavLink>\n            <StyledNavLink to=\"/contact\" background=\"https://images.unsplash.com/photo-1568160277762-0224a391b5a5?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=939&q=80\">Contact.</StyledNavLink>\n        </NavigationOverlayNav> \n    )\n}\n\nexport default NavigationOverlay;","import styled from 'styled-components';\n\nexport const Nav = styled.nav`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0 30px;\n    \n`;","import React from 'react';\n// components\nimport NavigationBurgerButton from './NavigationBurgerButton';\nimport NavigationOverlay from './NavigationOverlay';\n// styles\nimport {Nav} from '../styles/NavBarStyled';\n\nexport default function NavBar(props) {\n    \n    return (\n        <header>\n            <Nav>\n                <React.Fragment>\n                    <h1>harman.</h1>\n                </React.Fragment>\n                \n                <NavigationOverlay active={props.active} clicked={props.clicked}/>\n                <NavigationBurgerButton clicked={props.clicked} active={props.active}/>\n            </Nav>\n        </header>\n    )\n}\n","import React, {useState} from 'react';\nimport NavBar from '../components/NavBar'\n\nconst App = () => {\n\n    const [openMenu, setOpenMenu] = useState(false);\n\n    const toggleMenuHandler = () => {\n        setOpenMenu(!openMenu);\n    }\n\n    return (\n        <div>\n            <NavBar clicked={toggleMenuHandler} active={openMenu}/>         \n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react'\n\nexport default function Home() {\n    return (\n        <div>\n           <h1>welcome</h1>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function About() {\n    return (\n        <div>\n            <h1>About</h1>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function Projects() {\n    return (\n        <div>\n            <h1>Projects</h1>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function Contact() {\n    return (\n        <div>\n            <h1>Contact</h1>\n        </div>\n    )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Routes from './containers/Routes';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Routes />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport { Router } from \"@reach/router\";\nimport App from \"../containers/App\";\nimport Home from \"../pages/Home\";\nimport About from \"../pages/About\";\nimport Projects from \"../pages/Projects\";\nimport Contact from \"../pages/Contact\";\n\nexport default function Routes() {\n\treturn (\n\t\t<div>\n\t\t\t<App />\n\t\t\t<Router>\n\t\t\t\t<Home path=\"/\" />\n\t\t\t\t<About path=\"/about\" />\n\t\t\t\t<Projects path=\"/projects\" />\n\t\t\t\t<Contact path=\"/contact\" />\n\t\t\t</Router>\n\t\t</div>\n\t);\n}\n"],"sourceRoot":""}